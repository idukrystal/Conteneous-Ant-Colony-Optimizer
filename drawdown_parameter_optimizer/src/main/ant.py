""" Ant Class: for ACOR algoritm """

from scipy.stats import truncnorm
from src.main.data import parameters
from src.main.solution import Solution

class Ant:
    def __init__(self, number):
        """ Constructor: initilizes object parameters """
        self.number = number
    
    def find_solution(self, old_solution, sds):
        """
        Generates a new solution
        Return: generated solution
        """
        new_solution = Solution()

        # Sample gussian distributions generated by [old_solution] parameters
        # for new values to parameters of [new_solution]
        for parameter in new_solution.parameters:
            # mean or loc: equals value of parameter in old_solution
            mu = old_solution.parameters[parameter]
            # standard deviations of current parameter with other solutoon's
            sd = sds[parameter]
            # Upper and lower range of parameter
            a, b = parameters[parameter]
            a, b = (a - mu)/sd, (b - mu)/sd
            # Generate gussian diatribution to sample
            gus = truncnorm(a, b, loc=mu, scale=sd)
            # Sample gussian distribution
            new_solution.parameters[parameter] = gus.rvs()
        
        return new_solution
